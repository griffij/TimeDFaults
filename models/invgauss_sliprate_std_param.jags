# Use standard parameterisation with mu, lambda
# Number of censored observations
data {
 for (i in 1:N){
 zeros[i] = 0
 }
 for (j in 1:M){
 zeros_j[j] = 0
 }
 C = 10000
}
model{
  for (i in 1:N){
   # Prior for lambda parameter
  zeros[i] ~ dpois(zeros.mean[i])
  zeros.mean[i] = -l[i] + C
  # Censoring
  y[i] = ifelse(isCensored[i], censorLimitVec[i], Y[i])
  # For calculating CDF
  u1[i] = pow((lambda/y[i]), 1/2)*(y[i]/mu - 1)
  u2[i] = -1*pow((lambda/y[i]), 1/2)*(y[i]/mu + 1)
  cdf[i] = pnorm(u1[i], 0, 1) + exp((2*lambda)/mu)*pnorm(u2[i], 0, 1)
  # Log-likelihood 
  l[i] = ifelse(isCensored[i],
       log(1-cdf[i]),
       0.5*(log(lambda) - log(2*3.1416) - 3*log(y[i])) -
       0.5*lambda*pow((y[i] - mu), 2)/(pow(mu, 2)*y[i])
       )
    }
    
  # Now we do the slip-rate data
  for (j in 1:M){
  # Zeros trick
  zeros_j[j] ~ dpois(zeros_j.mean[j])
  zeros_j.mean[j] = -lt[j] + C
  # Now we use the additive property of the inverse Gaussian distribution
  # for i in (1,2,...n), Sum(X_i) = IG(n*mu, n^2*lambda)
  n_events[j] = dround((V[j]/throw_per_event), 0)
  ut1[j] = pow((pow(n_events[j],2)*lambda/T[j]), 1/2)*(T[j]/(n_events[j]*mu) - 1)
  ut2[j] = -1*pow((pow(n_events[j],2)*lambda/T[j]), 1/2)*(T[j]/(n_events[j]*mu) + 1)
  cdft[j] = pnorm(ut1[j], 0, 1) + exp((2*pow(n_events[j], 2)*lambda)/(n_events[j]*mu))*pnorm(ut2[j], 0, 1)
  # log-likelihood - censored form is kept although we aren't using this at present
  lt[j] = ifelse(isSlipCensored[j],
  	log(1-cdft[j]),
	0.5*(log(pow(n_events[j], 2)*lambda) - log(2*3.1416) - 3*log(T[j])) -
	0.5*pow(n_events[j], 2)*lambda*pow((T[j]-n_events[j]*mu), 2)/(pow((n_events[j]*mu), 2)*T[j])
	)
  # Implement error models on T (Age of surface) and V (Vertical offset)
  V_obs[j] ~ dnorm(V[j], V_tau[j]) # Observed offset
  T_obs[j] ~ dnorm(T[j], T_tau[j]) # Observed age of offset surface
  V[j] ~ dunif(0, 50)  #'True' offset value
  T[j] ~ dunif(0, 200000)  #'True' age value
  }

# Lets track alpha as well
alpha = pow((mu/lambda), 1/2)
# Priors - uninformative
lambda ~ dunif(0, 100000)
mu ~ dunif(0, 200000)
throw_per_event ~ dnorm(2.5, 4)T(0,) # Estimate of throw per event from trench data
}